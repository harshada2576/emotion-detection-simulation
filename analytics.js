class AnalyticsEngine {
    static calculateEmotionFrequency(interactions) {
        const frequency = {};
        
        interactions.forEach(interaction => {
            const emotion = interaction.detectedEmotion;
            frequency[emotion] = (frequency[emotion] || 0) + 1;
        });

        return frequency;
    }

    static emotionToScore(emotion) {
        const scoreMap = {
            'happy': 90,
            'surprised': 70,
            'neutral': 50,
            'anxious': 30,
            'sad': 20,
            'angry': 10
        };
        
        return scoreMap[emotion] || 50;
    }

    static generateRPAReport(sessionData) {
        const totalInteractions = sessionData.interactions.length;
        
        if (totalInteractions === 0) {
            return "No interaction data available for report generation.";
        }

        const frequency = this.calculateEmotionFrequency(sessionData.interactions);
        const emotionScores = sessionData.emotionHistory.map(entry => 
            this.emotionToScore(entry.emotion)
        );
        
        const averageScore = emotionScores.length > 0 ? 
            Math.round(emotionScores.reduce((a, b) => a + b) / emotionScores.length) : 0;

        // Generate report
        const report = `
ðŸ§  EMOTIONAL WELL-BEING ANALYTICS REPORT
Generated: ${new Date().toLocaleString()}
Session Duration: ${this.formatDuration(sessionData.startTime, new Date())}

ðŸ“Š SESSION OVERVIEW
â€¢ Total Interactions: ${totalInteractions}
â€¢ Session Start: ${sessionData.startTime.toLocaleString()}
â€¢ Average Emotional Score: ${averageScore}/100
â€¢ Primary Emotion: ${this.getMostFrequentEmotion(frequency)}

ðŸŽ­ EMOTION DISTRIBUTION
${Object.entries(frequency)
    .map(([emotion, count]) => 
        `â€¢ ${emotion.charAt(0).toUpperCase() + emotion.slice(1)}: ${count} occurrence${count !== 1 ? 's' : ''} (${Math.round((count / totalInteractions) * 100)}%)`
    )
    .join('\n')}

ðŸ“ˆ TREND ANALYSIS
â€¢ Emotional Stability: ${this.calculateStability(emotionScores)}
â€¢ Trend Direction: ${this.calculateTrend(emotionScores)}
â€¢ Peak Emotional State: ${this.getPeakEmotion(sessionData.emotionHistory)}

ðŸ’¡ RECOMMENDATIONS
${this.generateRecommendations(frequency, averageScore)}

ðŸ”’ DATA PRIVACY & ANONYMIZATION
â€¢ All data is anonymized and encrypted
â€¢ No personal identifiers are stored
â€¢ Report generated for personal insight only

This report was automatically generated by the Emotion Detection & Mental Health Assistant.
For professional mental health support, please consult licensed practitioners.
        `;

        return report;
    }

    static formatDuration(startTime, endTime) {
        const duration = endTime - startTime;
        const hours = Math.floor(duration / (1000 * 60 * 60));
        const minutes = Math.floor((duration % (1000 * 60 * 60)) / (1000 * 60));
        return `${hours}h ${minutes}m`;
    }

    static getMostFrequentEmotion(frequency) {
        if (Object.keys(frequency).length === 0) return 'No data';
        
        return Object.entries(frequency)
            .sort(([,a], [,b]) => b - a)[0][0];
    }

    static calculateStability(scores) {
        if (scores.length < 2) return 'Insufficient data';
        
        const average = scores.reduce((a, b) => a + b) / scores.length;
        const variance = scores.reduce((acc, score) => acc + Math.pow(score - average, 2), 0) / scores.length;
        const stdDev = Math.sqrt(variance);
        
        if (stdDev < 15) return 'High stability';
        if (stdDev < 30) return 'Moderate stability';
        return 'Low stability';
    }

    static calculateTrend(scores) {
        if (scores.length < 3) return 'Insufficient data';
        
        const recent = scores.slice(-3);
        const trend = recent[2] - recent[0];
        
        if (trend > 10) return 'Improving';
        if (trend < -10) return 'Declining';
        return 'Stable';
    }

    static getPeakEmotion(emotionHistory) {
        if (emotionHistory.length === 0) return 'No data';
        
        const highestScore = Math.max(...emotionHistory.map(entry => 
            this.emotionToScore(entry.emotion)
        ));
        
        const peakEntry = emotionHistory.find(entry => 
            this.emotionToScore(entry.emotion) === highestScore
        );
        
        return `${peakEntry.emotion} (${highestScore}/100)`;
    }

    static generateRecommendations(frequency, averageScore) {
        const recommendations = [];
        
        if (frequency.sad > frequency.happy) {
            recommendations.push('â€¢ Consider incorporating more positive activities into your routine');
        }
        
        if (frequency.anxious > 2) {
            recommendations.push('â€¢ Practice daily relaxation techniques to manage anxiety');
        }
        
        if (averageScore < 40) {
            recommendations.push('â€¢ Consider speaking with a mental health professional for support');
        }
        
        if (frequency.happy >= 3) {
            recommendations.push('â€¢ Continue engaging in activities that bring you joy and satisfaction');
        }
        
        if (recommendations.length === 0) {
            recommendations.push('â€¢ Maintain current emotional wellness practices');
            recommendations.push('â€¢ Continue regular emotional check-ins');
        }
        
        return recommendations.join('\n');
    }
}